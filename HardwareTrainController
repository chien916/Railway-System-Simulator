#include <ezButton.h>
#include <LiquidCrystal_I2C.h>
#define __ASSERT_USE_STDERR
#include <assert.h>

// function prototypes
bool test_cmd_power_is_positive(double commanded_power);

// set up lcd screen object
LiquidCrystal_I2C lcd(0x27, 16, 2);

#include "ArduPID.h"

ArduPID myController;

#include "PID_RT.h"

PID_RT PID;

unsigned long previousMillis = 0;

const long interval = 5000;

// To calculate the commanded power

float error = 0;
float errorPrev = 0;
float derivative = 0;
float integral = 0;
float period = 1;
float uk = 0;
float ukprev = 0;


// boolean to change station, when voltage change is detected, set change station to true
bool changeStation = false;

// Create ezButton objects for different buttons

// For the Train Driver

ezButton incrSetpoint(3); // button for increasing the setpoint speed

ezButton decrSetpoint(4); // button for decreasing the setpoint speed

ezButton setSetpoint(5); // create eZButton object that attaches to pin 7, for setting the setpoint

ezButton buttonLeftDoors(6); // button for opening and closing doors

ezButton buttonRightDoors(7); //button for opening and closing right doors

ezButton buttonInteriorLights(8); // button for turning on and off the interior and exterior lights
ezButton buttonExteriorLights(9);




// For the Engineer

ezButton joystick(2);


  String station[10] = {"Carnegie","Bell","Inglewood","Crafton","Ingram","Sheraden","Allegheny","North Side","Gateway Center","Wood Street"};
  
  
  // define variable for current station
  String currStation;
  
  // define variables for state of doors and lights
  bool leftDoors, rightDoors, interiorLights, exteriorLights;

  
  // define variable for setpoint
  float setpoint = 0;

  
  // define variables for authority and suggested speed
  float authority = 300; 
  float suggested_speed = 50;

  
  // define variables for commanded speed and commanded power
  double commanded_speed;
  
  double commanded_power_1, commanded_power_2, commanded_power_3;
  double commanded_speed_metric;

  // define variable for final commanded power, after voting
  float final_commanded_power;

  // define variable for maximum power
  float maximum_power = 1000;

  // define variable for actual speed
  double actual_speed;
  double actual_speed_metric;

  // define variable speed limit
  float speed_limit = 40;


  // define variable manual/automatic mode, 0 is manual, 1 is automatic
  bool mode;

  // define Kp and Ki for the engineers to set
  float Kp = 0;
  float Ki = 0;

  // define Kp and Ki that the train currently is using
  float Kptrain, Kitrain;
    
  int x = 0;  
int i = 0;

void setup() {
  // put your setup code here, to run once:



  Serial.begin(9600);

  // Setup code for ArduPID

  myController.begin(&actual_speed, &commanded_power_2, &commanded_speed, 0.0, 0.0, 0.0);
  myController.start();

  

  // Setup code for PID_RT


  PID.reset();
  PID.setOutputRange(0,maximum_power);
  PID.start();





  





  // initialize digital pin 11 as an output
  pinMode(11, OUTPUT);

  // initialize digital pin 13 as an output
  pinMode(13, OUTPUT);


  
  buttonLeftDoors.setDebounceTime(100);
  buttonRightDoors.setDebounceTime(100);
  buttonInteriorLights.setDebounceTime(100);
  buttonExteriorLights.setDebounceTime(100);

  setSetpoint.setDebounceTime(100);
  incrSetpoint.setDebounceTime(100);
  decrSetpoint.setDebounceTime(100);

  
  currStation = station[0];
}


void loop() {
  // put your main code here, to run repeatedly:

  unsigned long currentMillis = millis();




  if (changeStation) {
    changeStation = 0;
    i++; 
    currStation = station[i];
  }




  if (i == 9) {
    i = 0;  
  }


// For the Train Driver

  // Check if button for switching between manual and automatic mode is pressed

  // Check if button for increasing setpoint is pressed
  incrSetpoint.loop();

  if (incrSetpoint.isPressed()) {
    Serial.println("The increasing setpoint button is pressed.");
    setpoint += 5;
    
    Serial.print("The new setpoint is: ");
    Serial.println(setpoint);
  }

  // Check if button for decreasing setpoint is pressed
  decrSetpoint.loop();
  
  if (decrSetpoint.isPressed())  {
    Serial.println("The decreasing setpoint button is pressed.");
  
    if (setpoint >= 5)
      setpoint -= 5;
    else
      Serial.println("Decreasing the setpoint by 5 mph would result in a negative setpoint, which is not allowed.");

    Serial.print("The new setpoint is: ");
    Serial.println(setpoint);

  }

  // Check if button for setting setpoint is pressed
  setSetpoint.loop();

  if (setSetpoint.isPressed()) {
      Serial.println("The setting setpoint button is pressed.");
    
    
      if (setpoint <= speed_limit) {
          // communicate that the new setpoint is acceptable and under the speed limit
          Serial.print("The new setpoint is an acceptable speed, and the commanded speed will be updated to ");
          Serial.print(setpoint);
          Serial.println(" mph.");
         
          digitalWrite(13, HIGH);
          
          commanded_speed = setpoint; 
      }
      else {
          Serial.println("The new setpoint is not an acceptable speed, it's above the speed limit! The commanded speed will be updated to the speed limit, which is ");
          Serial.print(speed_limit);
          Serial.println(" mph.");
          digitalWrite(11, HIGH);
          commanded_speed = speed_limit;
        
      }
    
  }
    
      
    

  // Check if doors open/close button is pressed

  buttonLeftDoors.loop();

  if (buttonLeftDoors.isPressed()) {
    Serial.println("The left doors open/close button is pressed.");
    leftDoors = !leftDoors;
    if (leftDoors == 0) {
    // communicate that the doors are closing
      Serial.println("Left Doors are closing.");  
      Serial.println("?{202303231951}{SET}{TRAIN}{1234}{COM[NC_NM]_LDOOR}{false}");  

    }

    
    if (leftDoors == 1) {
      Serial.println("Left Doors are opening.");
      Serial.println("?{202303231951}{SET}{TRAIN}{1234}{COM[NC_NM]_LDOOR}{true}");  


    }

     
  }

  buttonRightDoors.loop();
  if (buttonRightDoors.isPressed()) {
    Serial.println("The right doors open/close button is pressed.");
    rightDoors = !rightDoors;
    if (rightDoors == 0)
    // communicate that the doors are closing
      Serial.println("Right Doors are closing.");
      Serial.println("?{202303231951}{SET}{TRAIN}{1234}{COM[NC_NM]_RDOOR}{false}");  
    if (rightDoors == 1)
      Serial.println("Right Doors are opening.");
      Serial.println("?{202303231951}{SET}{TRAIN}{1234}{COM[NC_NM]_RDOOR}{true}");  

     
  }

  // Check if Lights on/off button is pressed

  buttonInteriorLights.loop();

  if(buttonInteriorLights.isPressed()) {
    
    interiorLights = !interiorLights;
     

    Serial.println("The Interior lights button is pressed");

    // if the interior lights are on, set the interior lights of the train to TRUE, send thru serial
    if (interiorLights) {
      Serial.println("?{20303231951}{SET}{TRAIN}{1234}{COM[NC_NM]_INTLIGHT}{true}!");
    }

    else {
      
       Serial.println("?{20303231951}{SET}{TRAIN}{1234}{COM[NC_NM]_INTLIGHT}{false}!");
      
      
    }
   
    
  }

  if (buttonExteriorLights.isPressed()) {
    exteriorLights = !exteriorLights; 

    Serial.println("The Exterior lights button is pressed");

    // if the exterior lights are now on, set the exterior lights of train to TRUE, send thru serial
    if (exteriorLights) {
      Serial.println("?{20303231951}{SET}{TRAIN}{1234}{COM[NC_NM]_EXTLIGHT}{true}!");
    }
    else {
      Serial.println("?{20303231951}{SET}{TRAIN}{1234}{COM[NC_NM]_EXTLIGHT}{false}!");  
    }
 }
    



  // For the Engineer

  

  // Check if set Kp is pressed on joystick

  joystick.loop();
  
  if (joystick.isPressed()) {
    Serial.println("The Kp is set to ");
    Serial.println(Kp);
    Kptrain = Kp;

    // set request for Kp
    Serial.print("?{202303231951}{SET}{TRAIN}{1234}{NC_KP}{");
    Serial.print(Kptrain);
    Serial.println("}");

    // ArduPID
    myController.begin(&actual_speed_metric, &commanded_speed_metric, &commanded_power_2, Kptrain, Kitrain, 0.0);
    myController.start();
     myController.debug(&Serial, "myController", PRINT_INPUT     |
                                                PRINT_OUTPUT    |
                                                PRINT_SETPOINT  |
                                                PRINT_BIAS      |
                                                PRINT_P         |
                                                PRINT_I         |
                                                PRINT_D);
    
    







    // PID_RT
    PID.setKp(Kp);
  
  }





  // Check if set Ki pressed on joystick
  
  if (joystick.isPressed()) {
    Serial.println("The Ki is set to ");
    Serial.println(Ki);
    
    Kitrain = Ki;







    // PID_RT
    PID.setKi(Ki);
  
  }





  

  x++;
  if (x == 1000) {
  x = 0;




  


  

  // if the interval of time has passed
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
          
    // Check if increase Kp is selected on joystick
    int xValue = analogRead(A0);
    int yValue = analogRead(A1);

    if (xValue > 923) {
      Serial.println("Increase Kp");
      Kp += 0.5;
    }


    // Check if decrease Kp is selected on joystick
  
    if (xValue < 100) {
      Serial.println("Decrease Kp");
      Kp -= 0.5;
    }
          
        
  
  
    // Check if increase Ki selected on joystick
  
    if (yValue > 923) {
      Serial.println("Increasing Ki");
      Ki += 0.5;
    }


    // Check if decrease Ki selected on joystick
  
    if (yValue < 100) {
      Serial.println("Decreasing Ki");
      Ki -= 0.5;
    }



      
    // send and print out the states of everything, make sure everything is communicated

    Serial.println();
    Serial.println("---------------------------------------------------------------------------");
    Serial.println();

    Serial.print("Suggested Speed ");
    Serial.print(suggested_speed);
    Serial.println(" mph");

    // print state of left doors
    Serial.print("The left doors are ");
    if (leftDoors) {
      Serial.println("open");
    }
    else
    {
      Serial.println("closed");  
    }
    
    // print state of right doors
    Serial.print("The right doors are");
    if (rightDoors) {
      Serial.println("open");
    }
    else
    {
      Serial.println("closed");  
    }
  
  
    // print state of interior lights
    Serial.print("The interior lights are ");

    if (interiorLights) {
      Serial.println("on");  
    
    }
    else {
      Serial.println("off");  
    }

    // print state of exterior lights
    Serial.print("The exterior lights are ");
    if (exteriorLights) {
      Serial.println("on");
    }
    else {
      Serial.println("off");  
    }


    // turn lights off

    digitalWrite(13, LOW);
    digitalWrite(11, LOW);
    
    // print suggested speed
    Serial.print("The suggested speed is ");
    Serial.print(suggested_speed);
    Serial.println(" mph");
    
  
  
    // print authority
    Serial.print("The authority is ");
    Serial.print(authority);
    Serial.println(" ft");
    
  
    // print speed limit
    Serial.print("The speed limit is ");
    Serial.print(speed_limit);
    Serial.println(" mph");
  
    // print current setpoint that hasn't been confirmed yet
    Serial.print("The current unconfirmed setpoint is ");
    Serial.print(setpoint);
    Serial.println(" mph");
  
  
    // do commanded speed calculation for automatic mode
    if (mode == 1) {
      commanded_speed = suggested_speed;  
    }
  
    // Calculate the commanded power

    // Redundancy and Variety
    // voting system, commanded power calculated three ways

    // Way 1: Using my own code to implement PI controller
  
    commanded_speed_metric = commanded_speed * 0.44704;
    actual_speed_metric = actual_speed * 0.44704;
  
  
    errorPrev = error;
  
    error = commanded_speed_metric - actual_speed_metric;
  
    
  
    // Derivative
    derivative = error * Kp;
  
    // Integral
    ukprev = uk; 
    
    if (commanded_power_1 < maximum_power)
      uk = (ukprev + (period/2) * (error+errorPrev));
    else
      uk = ukprev;
    
    integral = uk * Ki;
  
    // calculate the updated commanded power
    commanded_power_1 = derivative + integral;

// commanded power cannot be negative, trains cannot move backwards
    if (commanded_power_1 < 0) {
      commanded_power_1 = 0;
    }

    // commanded power cannot be above the maximum power
    if (commanded_power_1 > maximum_power) {
      commanded_power_1 = maximum_power;
    }


    // Way 2: Using ArduPID



    myController.compute();

    myController.debug(&Serial, "myController", PRINT_INPUT     |
                                                PRINT_OUTPUT    |
                                                PRINT_SETPOINT  |
                                                PRINT_BIAS      |
                                                PRINT_P         |
                                                PRINT_I         |
                                                PRINT_D);




    


    // Way 3: PID_RT PID Controller



    PID.setPoint(commanded_speed_metric);

    PID.compute(actual_speed_metric);

    Serial.println(PID.compute(actual_speed_metric));
    Serial.println(PID.getInput());

    commanded_power_3 = PID.getOutput();
    Serial.print("The commanded power is ");
    Serial.println(commanded_power_3);

    // Voting System

    // if they all disagree, use the lowest commanded power

    if (commanded_power_1 != commanded_power_2 && commanded_power_2 != commanded_power_3 && commanded_power_3 != commanded_power_1)
      if (commanded_power_1 < commanded_power_2 && commanded_power_1 < commanded_power_3)
        final_commanded_power = commanded_power_1;
      if (commanded_power_2 < commanded_power_1 && commanded_power_2 < commanded_power_3)
        final_commanded_power = commanded_power_2;
      if (commanded_power_3 < commanded_power_1 && commanded_power_3 < commanded_power_2)
        final_commanded_power = commanded_power_3;

    // if 1 and 2 agree, but 3 is different, 1 and 2 are the majority, so use 1 and 2's commanded power
    if (commanded_power_1 == commanded_power_2 && commanded_power_1 != commanded_power_3)
      final_commanded_power = commanded_power_1;

    // if 2 and 3 agree, but 1 is different, use 2 and 3
    if (commanded_power_2 == commanded_power_3 && commanded_power_1 != commanded_power_2)
      final_commanded_power = commanded_power_2;

    // if 1 and 3 agree, but 2 is different, use 1 and 3
    if (commanded_power_1 == commanded_power_3 && commanded_power_2 != commanded_power_1)
      final_commanded_power = commanded_power_1;

   // if all three agree, use the agreed commanded power
    if (commanded_power_1 == commanded_power_2 && commanded_power_1 == commanded_power_3)
      final_commanded_power = commanded_power_1;
    
    
    // print commanded power

    Serial.println();
    Serial.println("----------------------------------------------");
    
    Serial.print("The Commanded Power (own code) is ");
    Serial.println(commanded_power_1);


    // call function to test the commanded power if the Kp is 1, the Ki is 0, and the commanded speed is set to 10 mph
    if (Kp == 1 && Ki == 0 && commanded_speed == 10) {
      test_cmd_power_is_positive(commanded_power_1);  
    }

    Serial.print("The Commanded Power (ArduPID) is ");
    Serial.println(commanded_power_2);
    
    Serial.print("The Commanded Power (PID_RT) is ");
    Serial.println(commanded_power_3);

    Serial.print("The Commanded Power (final) is ");
    Serial.print(final_commanded_power);
    Serial.println(" kW.");

    // set commanded power to new value for commanded power
    Serial.print("");
    Serial.print(final_commanded_power);
    Serial.println("}");
  
    // print commanded speed
    Serial.print("The Commanded Speed is ");
    Serial.print(commanded_speed);
    Serial.println(" mph.");
  
  
    // print actual speed
    Serial.print("The Actual Speed is ");
    Serial.print(actual_speed);
    Serial.println(" mph.");
  
    // print Kp
    Serial.print("The Kp is ");
    Serial.print(Kptrain);
    Serial.println(".");
  
    // print Ki
    Serial.print("The Ki is ");
    Serial.print(Kitrain);
    Serial.println(".");
    Serial.println();
  
    // print current station
    Serial.print("The current station is ");
    // announce the current station
    Serial.print(currStation);
    Serial.println(".");

  }




  }


}

void __assert(const char *__func, const char *__file, int __lineno, const char *__sexp) {

  // print that the test has failed
  Serial.println("Test failed!");
  
  // transmit diagnostic information through serial link
  Serial.println(__func);
  Serial.println(__file);
  Serial.println(__lineno, DEC);
  Serial.println(__sexp);
  Serial.flush();

// abort program execution
  abort();
  
  
  
  
  
  
}

bool test_cmd_power_is_positive(double commanded_power) {
    assert(commanded_power > 0);
    // if it makes it past assert, the test has passed, and print test has passed
    Serial.println("Test passed!");

}
